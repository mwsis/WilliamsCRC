############################################################################
# File:     makefile
#
# Purpose:  Generated makefile for the WilliamsCRC project,
#           for the Visual C++ 9.0 (x64) compiler
#           on the Win64 platform
#
# Created:  7th January 2021
# Updated:  7th January 2021
#
############################################################################


############################################################################
# environment check

!ifndef STLSOFT
!error STLSOFT must be defined
!endif # !STLSOFT

############################################################################
# symbols

########################################
# project & compiler version

COMP_TAG					=	vc9
ARCH_TAG					=	.x64
OS_TAG						=	
PROJ_TAG					=	SynesisSoftware.WilliamsCRC
PROJ_VER_MAJOR				=	1
PROJ_MOD_TAG				=	core
PROJ_TAG_VER				=	$(PROJ_TAG).$(PROJ_VER_MAJOR).$(PROJ_MOD_TAG)
COMP_ARCH_OS_TAG			=	$(COMP_TAG)$(OS_TAG)$(ARCH_TAG)

PROJ_MAKEFILE_NAME			 =	makefile

########################################
# directories

PROJ_BASE_DIR				=	..\..
PROJ_BIN_DIR				=	$(PROJ_BASE_DIR)\bin
PROJ_INCLUDE_DIR			=	$(PROJ_BASE_DIR)\include
PROJ_LIB_DIR				=	$(PROJ_BASE_DIR)\lib
PROJ_OBJ_DIR				=	.
PROJ_SRC_DIR				=	$(PROJ_BASE_DIR)\src
PROJ_EXAMPLES_DIR			=	$(PROJ_BASE_DIR)\examples
PROJ_SAMPLES_DIR			=	$(PROJ_BASE_DIR)\samples
PROJ_TEST_ROOT_DIR			=	$(PROJ_BASE_DIR)\test
PROJ_TEST_COMPONENT_DIR		=	$(PROJ_TEST_ROOT_DIR)\component
PROJ_TEST_PERFORMANCE_DIR	=	$(PROJ_TEST_ROOT_DIR)\performance
PROJ_TEST_SCRATCH_DIR		=	$(PROJ_TEST_ROOT_DIR)\scratch
PROJ_TEST_UNIT_DIR			=	$(PROJ_TEST_ROOT_DIR)\unit

########################################
# tools

CC							=	cl
CPPC						=	cl
AR							=	lib
LD							=	link
RM							=	DEL /F
CP							=	COPY
RC							=	rc

########################################
# tool arguments


# lib

LIBS_LEADER 			=	

# lib paths

ENV_LIBPATHS		=
COMMON_LIBPATHS			=


LIBPATHS=\
 $(LIBS_LEADER)\
 $(COMMON_LIBPATHS)\
 $(ENV_LIBPATHS)\
 \


# lib names

VARIANT_LIB_COMMON			=	advapi32.lib kernel32.lib ole32.lib oleaut32.lib shlwapi.lib user32.lib uuid.lib version.lib wininet.lib ws2_32.lib

TARGET_LIB_DLL_D = \
 $(VARIANT_LIB_COMMON) \
 \

TARGET_LIB_DLL_R = \
 $(VARIANT_LIB_COMMON) \
 \

TARGET_LIB_MT_D = \
 $(VARIANT_LIB_COMMON) \
 \

TARGET_LIB_MT_R = \
 $(VARIANT_LIB_COMMON) \
 \


# #defines

COMMON_DEFS 		=	-DWIN64

CUSTOM_DEFS			=

# includes

COMMON_INCLUDES		=	



# CC flags

CC_F_NOLOGO					=	-nologo
CC_F_COMPILE_ONLY			=	-c
CC_F_MAXIMUM_SPEED			=	-O2
CC_F_MINIMUM_SIZE			=	-O1
CC_F_WARNING_ERR			=	-WX
CC_F_WARNING_MAX			=	-W4

CC_FLAGS_BASE =\
 $(CC_F_NOLOGO)\
 $(CC_F_COMPILE_ONLY)\
 $(CC_F_WARNING_MAX)\
 $(CC_F_WARNING_ERR)\
 \

CC_FLAGS_DLL_D =\
 $(CC_FLAGS_BASE)\
 \

CC_FLAGS_DLL_R =\
 $(CC_FLAGS_BASE)\
 \

CC_FLAGS_MT_D =\
 $(CC_FLAGS_BASE)\
 \

CC_FLAGS_MT_R =\
 $(CC_FLAGS_BASE)\
 \



# CPPC flags

CPPC_F_NOLOGO				=	-nologo
CPPC_F_COMPILE_ONLY			=	-c
CPPC_F_EXCEPTIONS_ON		=	-EHsc
CPPC_F_MAXIMUM_SPEED		=	-O2
CPPC_F_MINIMUM_SIZE			=	-O1
CPPC_F_RTTI_ON				=	-GR
CPPC_F_WARNING_ERR			=	-WX
CPPC_F_WARNING_MAX			=	-W4

CPPC_FLAGS_BASE =\
 $(CPPC_F_NOLOGO)\
 $(CPPC_F_COMPILE_ONLY)\
 $(CPPC_F_EXCEPTIONS_ON)\
 $(CPPC_F_RTTI_ON)\
 $(CPPC_F_WARNING_MAX)\
 $(CPPC_F_WARNING_ERR)\
 \

CPPC_FLAGS_DLL_D =\
 $(CPPC_FLAGS_BASE)\
 \

CPPC_FLAGS_DLL_R =\
 $(CPPC_FLAGS_BASE)\
 \

CPPC_FLAGS_MT_D =\
 $(CPPC_FLAGS_BASE)\
 \

CPPC_FLAGS_MT_R =\
 $(CPPC_FLAGS_BASE)\
 \



# CC defines

CC_DEFS_BASE =\
 $(COMMON_DEFS)\
 $(CUSTOM_DEFS)\
 \


CC_DEFS_DLL_D =\
 $(CC_DEFS_BASE)\
 \

CC_DEFS_DLL_R =\
 $(CC_DEFS_BASE)\
 \

CC_DEFS_MT_D =\
 $(CC_DEFS_BASE)\
 \

CC_DEFS_MT_R =\
 $(CC_DEFS_BASE)\
 \


# CPPC defines

CPPC_DEFS_BASE =\
 $(COMMON_DEFS)\
 $(CUSTOM_DEFS)\
 \


CPPC_DEFS_DLL_D =\
 $(CPPC_DEFS_BASE)\
 \

CPPC_DEFS_DLL_R =\
 $(CPPC_DEFS_BASE)\
 \

CPPC_DEFS_MT_D =\
 $(CPPC_DEFS_BASE)\
 \

CPPC_DEFS_MT_R =\
 $(CPPC_DEFS_BASE)\
 \



# CC includes

CC_INCLUDES_BASE =\
 \
 -I$(PROJ_INCLUDE_DIR)\
 -I$(STLSOFT)\include\
 $(COMMON_INCLUDES)\
 \

CC_INCLUDES_DLL_D =\
 $(CC_INCLUDES_BASE)\
 \

CC_INCLUDES_DLL_R =\
 $(CC_INCLUDES_BASE)\
 \

CC_INCLUDES_MT_D =\
 $(CC_INCLUDES_BASE)\
 \

CC_INCLUDES_MT_R =\
 $(CC_INCLUDES_BASE)\
 \


# CPPC includes

CPPC_INCLUDES_BASE =\
 \
 -I$(PROJ_INCLUDE_DIR)\
 -I$(STLSOFT)\include\
 $(COMMON_INCLUDES)\
 \

CPPC_INCLUDES_DLL_D =\
 $(CPPC_INCLUDES_BASE)\
 \

CPPC_INCLUDES_DLL_R =\
 $(CPPC_INCLUDES_BASE)\
 \

CPPC_INCLUDES_MT_D =\
 $(CPPC_INCLUDES_BASE)\
 \

CPPC_INCLUDES_MT_R =\
 $(CPPC_INCLUDES_BASE)\
 \


# CC args (= flags + defines + includes)

CC_ARGS_DLL_D=\
 $(CC_FLAGS_DLL_D)\
 -MDd -D_DEBUG -Zi -Fd$*.pdb $(CC_F_MAXIMUM_SPEED) -D_AFXDLL\
 $(CC_DEFS_DLL_D)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CC_INCLUDES_DLL_D)
CC_ARGS_DLL_R=\
 $(CC_FLAGS_DLL_R)\
 -MD -DNDEBUG $(CC_F_MAXIMUM_SPEED) -D_AFXDLL\
 $(CC_DEFS_DLL_R)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CC_INCLUDES_DLL_R)
CC_ARGS_MT_D=\
 $(CC_FLAGS_MT_D)\
 -MTd -D_DEBUG -Zi -Fd$*.pdb\
 $(CC_DEFS_MT_D)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CC_INCLUDES_MT_D)
CC_ARGS_MT_R=\
 $(CC_FLAGS_MT_R)\
 -MT -DNDEBUG $(CC_F_MAXIMUM_SPEED)\
 $(CC_DEFS_MT_R)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CC_INCLUDES_MT_R)

# CPPC args (= flags + defines + includes)

CPPC_ARGS_DLL_D=\
 $(CPPC_FLAGS_DLL_D)\
 -MDd -D_DEBUG -Zi -Fd$*.pdb $(CPPC_F_MAXIMUM_SPEED) -D_AFXDLL\
 $(CPPC_DEFS_DLL_D)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CPPC_INCLUDES_DLL_D)

CPPC_ARGS_CORE_DLL_D=\
 -I$(PROJ_SRC_DIR)\wcrc\
 $(CPPC_ARGS_DLL_D)\

CPPC_ARGS_DLL_R=\
 $(CPPC_FLAGS_DLL_R)\
 -MD -DNDEBUG $(CPPC_F_MAXIMUM_SPEED) -D_AFXDLL\
 $(CPPC_DEFS_DLL_R)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CPPC_INCLUDES_DLL_R)

CPPC_ARGS_CORE_DLL_R=\
 -I$(PROJ_SRC_DIR)\wcrc\
 $(CPPC_ARGS_DLL_R)\

CPPC_ARGS_MT_D=\
 $(CPPC_FLAGS_MT_D)\
 -MTd -D_DEBUG -Zi -Fd$*.pdb\
 $(CPPC_DEFS_MT_D)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CPPC_INCLUDES_MT_D)

CPPC_ARGS_CORE_MT_D=\
 -I$(PROJ_SRC_DIR)\wcrc\
 $(CPPC_ARGS_MT_D)\

CPPC_ARGS_MT_R=\
 $(CPPC_FLAGS_MT_R)\
 -MT -DNDEBUG $(CPPC_F_MAXIMUM_SPEED)\
 $(CPPC_DEFS_MT_R)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CPPC_INCLUDES_MT_R)

CPPC_ARGS_CORE_MT_R=\
 -I$(PROJ_SRC_DIR)\wcrc\
 $(CPPC_ARGS_MT_R)\



# AR args

AR_ARGS 			=	-nologo


# LD args

LD_F_NOLOGO					=	-nologo

LD_FLAGS_BASE =\
 $(LD_F_NOLOGO)\
 \

LD_FLAGS_DLL_D =\
 $(LD_FLAGS_BASE)\
 \

LD_FLAGS_DLL_R =\
 $(LD_FLAGS_BASE)\
 \

LD_FLAGS_MT_D =\
 $(LD_FLAGS_BASE)\
 \

LD_FLAGS_MT_R =\
 $(LD_FLAGS_BASE)\
 \


LD_INCLUDES_BASE =\
 $(LIBPATHS)\
 \

LD_INCLUDES_DLL_D =\
 $(LD_INCLUDES_BASE)\
 \

LD_INCLUDES_DLL_R =\
 $(LD_INCLUDES_BASE)\
 \

LD_INCLUDES_MT_D =\
 $(LD_INCLUDES_BASE)\
 \

LD_INCLUDES_MT_R =\
 $(LD_INCLUDES_BASE)\
 \


LD_ARGS_DLL_D=               $(LD_FLAGS_DLL_D)  $(LD_INCLUDES_DLL_D)
LD_ARGS_DLL_R=               $(LD_FLAGS_DLL_R)  $(LD_INCLUDES_DLL_R)
LD_ARGS_MT_D=               $(LD_FLAGS_MT_D)  $(LD_INCLUDES_MT_D)
LD_ARGS_MT_R=               $(LD_FLAGS_MT_R)  $(LD_INCLUDES_MT_R)

############################################################################
# names

############################################################
# targets

########################################
# libraries

# core
LIB_CORE_DLL_D			=	$(PROJ_LIB_DIR)\$(PROJ_TAG_VER).$(COMP_ARCH_OS_TAG).dll.debug.lib
LIB_CORE_DLL_R			=	$(PROJ_LIB_DIR)\$(PROJ_TAG_VER).$(COMP_ARCH_OS_TAG).dll.lib
LIB_CORE_MT_D			=	$(PROJ_LIB_DIR)\$(PROJ_TAG_VER).$(COMP_ARCH_OS_TAG).mt.debug.lib
LIB_CORE_MT_R			=	$(PROJ_LIB_DIR)\$(PROJ_TAG_VER).$(COMP_ARCH_OS_TAG).mt.lib

TARGETS_LIB_CORE=\
 $(LIB_CORE_DLL_D)\
 $(LIB_CORE_DLL_R)\
 $(LIB_CORE_MT_D)\
 $(LIB_CORE_MT_R)\
 \

########################################
# examples


########################################
# tests

##############################
# component tests


##############################
# scratch tests

TARG_TEST_SCRT_flchksm_DLL_D		=	$(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.file_checksum.$(COMP_ARCH_OS_TAG).dll.debug.exe
TARG_TEST_SCRT_flchksm_DLL_R		=	$(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.file_checksum.$(COMP_ARCH_OS_TAG).dll.exe
TARG_TEST_SCRT_flchksm_MT_D		=	$(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.file_checksum.$(COMP_ARCH_OS_TAG).mt.debug.exe
TARG_TEST_SCRT_flchksm_MT_R		=	$(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.file_checksum.$(COMP_ARCH_OS_TAG).mt.exe

TARGETS_TEST_SCRATCH=\
 $(TARG_TEST_SCRT_flchksm_DLL_D)\
 $(TARG_TEST_SCRT_flchksm_DLL_R)\
 $(TARG_TEST_SCRT_flchksm_MT_D)\
 $(TARG_TEST_SCRT_flchksm_MT_R)\
 \

##############################
# unit tests


############################################################
# objects

########################################
# libraries

# core

OBJ_lib_core_DLL_D =			$(PROJ_OBJ_DIR)\$(PROJ_TAG).core.dll.debug.obj

OBJ_CORE_DLL_D=\
 $(OBJ_lib_core_DLL_D)\
 \

OBJ_lib_core_DLL_R =			$(PROJ_OBJ_DIR)\$(PROJ_TAG).core.dll.obj

OBJ_CORE_DLL_R=\
 $(OBJ_lib_core_DLL_R)\
 \

OBJ_lib_core_MT_D =			$(PROJ_OBJ_DIR)\$(PROJ_TAG).core.mt.debug.obj

OBJ_CORE_MT_D=\
 $(OBJ_lib_core_MT_D)\
 \

OBJ_lib_core_MT_R =			$(PROJ_OBJ_DIR)\$(PROJ_TAG).core.mt.obj

OBJ_CORE_MT_R=\
 $(OBJ_lib_core_MT_R)\
 \


########################################
# examples


########################################
# tests

##############################
# component tests


##############################
# scratch tests

OBJ_TEST_SCRT_flchksm_DLL_D		=	$(PROJ_OBJ_DIR)\test.scratch.file_checksum.dll.debug.obj
OBJ_TEST_SCRT_flchksm_DLL_R		=	$(PROJ_OBJ_DIR)\test.scratch.file_checksum.dll.obj
OBJ_TEST_SCRT_flchksm_MT_D		=	$(PROJ_OBJ_DIR)\test.scratch.file_checksum.mt.debug.obj
OBJ_TEST_SCRT_flchksm_MT_R		=	$(PROJ_OBJ_DIR)\test.scratch.file_checksum.mt.obj

##############################
# unit tests


############################################################################
# targets

# primary

_default:					build

# infrastructure

check.lib.dir:				$(PROJ_MAKEFILE_NAME)
	@-if not exist $(PROJ_LIB_DIR)\NUL mkdir $(PROJ_LIB_DIR)

check.bin.dir:				$(PROJ_MAKEFILE_NAME)
	@-if not exist $(PROJ_BIN_DIR)\NUL mkdir $(PROJ_BIN_DIR)


build.libs.core:	\
 check.lib.dir \
 $(TARGETS_LIB_CORE) \
 \

build.libs: \
 build.libs.core \
 \

build.test.unit:

build.test.component:

build.test.scratch:	\
 check.bin.dir \
 $(TARGETS_TEST_SCRATCH) \
 \


build.test:	\
 build.test.unit \
 build.test.component \
 build.test.scratch \
 \

build.examples:

build.samples:


build:	\
 compile \
 build.libs \
 build.test \
 build.examples \
 build.samples \
 \

compile:	\
 \

clean.libs.core:
	@echo Cleaning Core libraries ...
	@-IF EXIST *.core*.obj $(RM) *.core*.obj
	@-IF EXIST $(LIB_CORE_DLL_D) $(RM) $(LIB_CORE_DLL_D)
	@-IF EXIST $(LIB_CORE_DLL_R) $(RM) $(LIB_CORE_DLL_R)
	@-IF EXIST $(LIB_CORE_MT_D) $(RM) $(LIB_CORE_MT_D)
	@-IF EXIST $(LIB_CORE_MT_R) $(RM) $(LIB_CORE_MT_R)
	@-IF EXIST *.core*.pdb $(RM) *.core*.pdb

clean.libs.all:	\
 clean.libs.core \
 \

clean.test.component:

clean.test.scratch:
	@echo cleaning Test:Scratch libraries ...
	@-IF EXIST test.scratch*.obj $(RM) test.scratch*.obj
	@-IF EXIST $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).dll.debug.exe $(RM) $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).dll.debug.exe
	@-IF EXIST $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).dll.exe $(RM) $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).dll.exe
	@-IF EXIST $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).mt.debug.exe $(RM) $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).mt.debug.exe
	@-IF EXIST $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).mt.exe $(RM) $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).mt.exe
	@-IF EXIST test.scratch*.pdb $(RM) test.scratch*.pdb

clean.test.unit:
	@echo cleaning Test:Unit libraries ...
	@-IF EXIST test.unit*.obj $(RM) test.unit*.obj
	@-IF EXIST $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).dll.debug.exe $(RM) $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).dll.debug.exe
	@-IF EXIST $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).dll.exe $(RM) $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).dll.exe
	@-IF EXIST $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).mt.debug.exe $(RM) $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).mt.debug.exe
	@-IF EXIST $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).mt.exe $(RM) $(PROJ_BIN_DIR)\$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).mt.exe
	@-IF EXIST test.unit*.pdb $(RM) test.unit*.pdb

clean.test:	\
 clean.test.component \
 clean.test.scratch \
 clean.test.unit \
 \

clean.examples:

clean.samples:

clean:	\
 clean.libs.all \
 clean.test \
 clean.examples \
 clean.samples \
 \

test:	\
 \




############################################################################
# build targets

##################################################
# libraries

########################################
# core library

$(LIB_CORE_DLL_D): $(OBJ_CORE_DLL_D) $(PROJ_MAKEFILE_NAME)
	@-if not exist $(PROJ_LIB_DIR)\NUL mkdir $(PROJ_LIB_DIR)
	$(AR) $(AR_ARGS) -out:$@ $(OBJ_CORE_DLL_D)

$(OBJ_lib_core_DLL_D):	$(PROJ_MAKEFILE_NAME) $(PROJ_SRC_DIR)\WilliamsCRC.cpp
	$(CPPC) $(CPPC_ARGS_CORE_DLL_D) $(CPPC_INCLUDES) -Fo$@ $(PROJ_SRC_DIR)\WilliamsCRC.cpp

$(LIB_CORE_DLL_R): $(OBJ_CORE_DLL_R) $(PROJ_MAKEFILE_NAME)
	@-if not exist $(PROJ_LIB_DIR)\NUL mkdir $(PROJ_LIB_DIR)
	$(AR) $(AR_ARGS) -out:$@ $(OBJ_CORE_DLL_R)

$(OBJ_lib_core_DLL_R):	$(PROJ_MAKEFILE_NAME) $(PROJ_SRC_DIR)\WilliamsCRC.cpp
	$(CPPC) $(CPPC_ARGS_CORE_DLL_R) $(CPPC_INCLUDES) -Fo$@ $(PROJ_SRC_DIR)\WilliamsCRC.cpp

$(LIB_CORE_MT_D): $(OBJ_CORE_MT_D) $(PROJ_MAKEFILE_NAME)
	@-if not exist $(PROJ_LIB_DIR)\NUL mkdir $(PROJ_LIB_DIR)
	$(AR) $(AR_ARGS) -out:$@ $(OBJ_CORE_MT_D)

$(OBJ_lib_core_MT_D):	$(PROJ_MAKEFILE_NAME) $(PROJ_SRC_DIR)\WilliamsCRC.cpp
	$(CPPC) $(CPPC_ARGS_CORE_MT_D) $(CPPC_INCLUDES) -Fo$@ $(PROJ_SRC_DIR)\WilliamsCRC.cpp

$(LIB_CORE_MT_R): $(OBJ_CORE_MT_R) $(PROJ_MAKEFILE_NAME)
	@-if not exist $(PROJ_LIB_DIR)\NUL mkdir $(PROJ_LIB_DIR)
	$(AR) $(AR_ARGS) -out:$@ $(OBJ_CORE_MT_R)

$(OBJ_lib_core_MT_R):	$(PROJ_MAKEFILE_NAME) $(PROJ_SRC_DIR)\WilliamsCRC.cpp
	$(CPPC) $(CPPC_ARGS_CORE_MT_R) $(CPPC_INCLUDES) -Fo$@ $(PROJ_SRC_DIR)\WilliamsCRC.cpp

##################################################
# tests

##############################
# component tests

##############################
# scratch tests

$(TARG_TEST_SCRT_flchksm_DLL_D):    \
		$(OBJ_TEST_SCRT_flchksm_DLL_D)\
		$(LIB_CORE_DLL_D)\
		$(LIB_SHWILD_DLL_D)\
		$(LIB_XTESTS_DLL_D)\
		$(PROJ_MAKEFILE_NAME)
	$(LD) $(LD_ARGS_DLL_D) -out:$@ \
		$(OBJ_TEST_SCRT_flchksm_DLL_D)\
		$(LIB_CORE_DLL_D)\
		$(LIB_SHWILD_DLL_D)\
		$(LIB_XTESTS_DLL_D)\
		$(TARGET_LIB_DLL_D)

$(OBJ_TEST_SCRT_flchksm_DLL_D): $(CORE_HEADERS) $(SHWILD_HEADERS) $(XTESTS_HEADERS) $(PROJ_MAKEFILE_NAME) $(PROJ_TEST_SCRATCH_DIR)\test.scratch.file_checksum\test.scratch.file_checksum.cpp
	$(CPPC) $(CPPC_ARGS_DLL_D) -Fo$@ $(PROJ_TEST_SCRATCH_DIR)\test.scratch.file_checksum\test.scratch.file_checksum.cpp

$(TARG_TEST_SCRT_flchksm_DLL_R):    \
		$(OBJ_TEST_SCRT_flchksm_DLL_R)\
		$(LIB_CORE_DLL_R)\
		$(LIB_SHWILD_DLL_R)\
		$(LIB_XTESTS_DLL_R)\
		$(PROJ_MAKEFILE_NAME)
	$(LD) $(LD_ARGS_DLL_R) -out:$@ \
		$(OBJ_TEST_SCRT_flchksm_DLL_R)\
		$(LIB_CORE_DLL_R)\
		$(LIB_SHWILD_DLL_R)\
		$(LIB_XTESTS_DLL_R)\
		$(TARGET_LIB_DLL_R)

$(OBJ_TEST_SCRT_flchksm_DLL_R): $(CORE_HEADERS) $(SHWILD_HEADERS) $(XTESTS_HEADERS) $(PROJ_MAKEFILE_NAME) $(PROJ_TEST_SCRATCH_DIR)\test.scratch.file_checksum\test.scratch.file_checksum.cpp
	$(CPPC) $(CPPC_ARGS_DLL_R) -Fo$@ $(PROJ_TEST_SCRATCH_DIR)\test.scratch.file_checksum\test.scratch.file_checksum.cpp

$(TARG_TEST_SCRT_flchksm_MT_D):    \
		$(OBJ_TEST_SCRT_flchksm_MT_D)\
		$(LIB_CORE_MT_D)\
		$(LIB_SHWILD_MT_D)\
		$(LIB_XTESTS_MT_D)\
		$(PROJ_MAKEFILE_NAME)
	$(LD) $(LD_ARGS_MT_D) -out:$@ \
		$(OBJ_TEST_SCRT_flchksm_MT_D)\
		$(LIB_CORE_MT_D)\
		$(LIB_SHWILD_MT_D)\
		$(LIB_XTESTS_MT_D)\
		$(TARGET_LIB_MT_D)

$(OBJ_TEST_SCRT_flchksm_MT_D): $(CORE_HEADERS) $(SHWILD_HEADERS) $(XTESTS_HEADERS) $(PROJ_MAKEFILE_NAME) $(PROJ_TEST_SCRATCH_DIR)\test.scratch.file_checksum\test.scratch.file_checksum.cpp
	$(CPPC) $(CPPC_ARGS_MT_D) -Fo$@ $(PROJ_TEST_SCRATCH_DIR)\test.scratch.file_checksum\test.scratch.file_checksum.cpp

$(TARG_TEST_SCRT_flchksm_MT_R):    \
		$(OBJ_TEST_SCRT_flchksm_MT_R)\
		$(LIB_CORE_MT_R)\
		$(LIB_SHWILD_MT_R)\
		$(LIB_XTESTS_MT_R)\
		$(PROJ_MAKEFILE_NAME)
	$(LD) $(LD_ARGS_MT_R) -out:$@ \
		$(OBJ_TEST_SCRT_flchksm_MT_R)\
		$(LIB_CORE_MT_R)\
		$(LIB_SHWILD_MT_R)\
		$(LIB_XTESTS_MT_R)\
		$(TARGET_LIB_MT_R)

$(OBJ_TEST_SCRT_flchksm_MT_R): $(CORE_HEADERS) $(SHWILD_HEADERS) $(XTESTS_HEADERS) $(PROJ_MAKEFILE_NAME) $(PROJ_TEST_SCRATCH_DIR)\test.scratch.file_checksum\test.scratch.file_checksum.cpp
	$(CPPC) $(CPPC_ARGS_MT_R) -Fo$@ $(PROJ_TEST_SCRATCH_DIR)\test.scratch.file_checksum\test.scratch.file_checksum.cpp

##############################
# unit tests

############################### end of file ################################

